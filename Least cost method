clc 
clear all
format short
%% input the parameters
cost=[11 20 7 8;21 16 10 12;8 12 18 19];
s=[50 40 70]; % supply
d=[30 25 35 40]; 
% demand
% to check balanced/unbalanced TP
if sum(s)==sum(d)
    fprintf('Given TP is balanced\n')
else
    fprintf('Given TP is unbalanced\n')
    %% to further add a column or a row
    if sum(s)<sum(d)
        cost(end+1,:)=zeros(1,size(d,2))
        s(end+1)=sum(d)-sum(s)
    else
        cost(:,end+1)=zeros(size(s,2),1)
        d(end+1)=sum(s)-sum(d)
    end
end

%% LCM
Icost=cost	
x=zeros(size(cost)); 
% initial allocation
[m,n]=size(cost)     
% finding number of rows and number of columns
BFS=m+n-1;

%% to find the cell with minimum cost
for i=1:size(cost,1) %% no. of rows
    for j=1:size(cost,2) %% no. of columns
        [row_ind, col_ind]=find(cost==min(cost(:))) % find min value in each row
        x11=min(s(row_ind),d(col_ind))
        [val,index]=max(x11) %finding the min cost
        ii=row_ind(index) 
% identify row position
        jj=col_ind(index)     
% identify col position
        y11=min(s(ii),d(jj)) 
% identify the min value at row and col position  
        x(ii,jj)=y11
        s(ii)=s(ii)-y11
        d(jj)=d(jj)-y11
        cost(ii,jj)=inf
    end
end

fprintf('Initial BFS\n')
IBFS=array2table(x);
disp(IBFS)
% check deg and non-deg
finalBFS=length(nonzeros(x))
if finalBFS==BFS
    fprintf('NON-DEGENERATE SOLUTION')
else
    fprintf('DEGENERATE  SOLUTION')
end
TPcost=sum(sum(Icost.*x))
