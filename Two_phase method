clc;
clear all;
A=[1 3 -1 0 1 0; 1 1 0 -1 0 1] 
b=[3;2]
c=[0 0 0 0 -1 -1]
Bi=[5,6] %% slack variables
Cb=c(Bi) %% cost corresponding to indexes mention in Bi
B=A(:,Bi) %%identity matrix corresponding to slack variables A martix ka 3rd and fourth column as we are finding identity matrix
alpha=inv(B)*A
sol=inv(B)*b %% sol val matrix
zjcj=(Cb*alpha) - c
[minElement,minIndex]=min(zjcj)
%% now find minimum ratio and change value at that
while(minElement<0) %%min val corresponding to index
    column=alpha(:,minIndex); %%column corresponding to minimum value in objective function
    [m,n]=size(column)
    for i=1:m
        if (column(i,1) > 0)
            ratio(i)=sol(i,1)/column(i,1);

        else
            ratio(i)=10^100; %% otherwise ek max value hmne assign kardi
        end
    end
    [min_element,min_index]=min(ratio); %% minimum ratio m se minimum element or unka index
    Bi(min_index)=minIndex;
    Cb=c(Bi);
    B=A(:,Bi);
    alpha= inv(B)*A
    sol=inv(B)*b;
    zjcj=Cb*alpha - c;
    [minElement,minIndex]=min(zjcj);
end
optimalVal= Cb*sol;
if(find(Bi==5) == 0)
    fprintf('infeasible solution')
elif (find(Bi==6) == 0)
    fprintf('infeasible solution')
else
    fprintf('do phase-2')
end
%% after phase 1 when it will proceed artificial varialbes will not be in basis now 
A=[1 3 -1 0 ; 1 1 0 -1 ] 
c=[-3 -5 0 0]
Cb=c(Bi) %% cost corresponding to indexes mention in Bi
B=A(:,Bi) %%identity matrix corresponding to slack variables A martix ka 3rd and fourth column as we are finding identity matrix
alpha=inv(B)*A
sol=inv(B)*b %% sol val matrix
zjcj=(Cb*alpha) - c
[minElement,minIndex]=min(zjcj)
%% now find minimum ratio and change value at that
while(minElement<0) %%min val corresponding to index
    column=alpha(:,minIndex); %%column corresponding to minimum value in objective function
    [m,n]=size(column)
    for i=1:m
        if (column(i,1) > 0)
            ratio(i)=sol(i,1)/column(i,1);

        else
            ratio(i)=10^100; %% otherwise ek max value hmne assign kardi
        end
    end
    [min_element,min_index]=min(ratio); %% minimum ratio m se minimum element or unka index
    Bi(min_index)=minIndex;
    Cb=c(Bi);
    B=A(:,Bi);
    alpha= inv(B)*A
    sol=inv(B)*b;
    zjcj=Cb*alpha - c;
    [minElement,minIndex]=min(zjcj)
end
optimalVal= -(Cb*sol)
