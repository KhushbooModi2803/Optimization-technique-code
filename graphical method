clear all
clc

c = [3 5];

A = [1 2; 1 1; 0 1];
b = [2000; 1500; 600];

x=0:100:max(b);

y1 = (b(1)-(A(1,1)*x))/A(1,2);
y2 = (b(2)-(A(2,1)*x))/A(2,2);
y3 = (b(3)-(A(3,1)*x))/A(3,2);

plot(x,y1,x,y2,x,y3);
xlim([0 2000]);
ylim([0 2000]);


% finding all intersecting points with coordinate axes
zerox = find(x==0);             % x = 0 at index 1
% y1 at index 1 and x = 0
% y2 at index 1 and x = 0
% y3 at index 1 and x = 0
zeroy1 = find(y1==0);        % y = 0 and x at index 21
zeroy2 = find(y2==0);        % y = 0 and x at index 16
zeroy3 = find(y3==0);

% finding points that cut with coordinate axis
c_points = [0 y1(1); 0 y2(1); 0 y3(1); x(21) 0; x(16) 0];

% finding intersection points of the plot lines with one another

pt = 1;

for i=1:2
    for j=i+1:3
        ma = [A(i,:); A(j,:)];
        mb = [b(i); b(j)];
        int_point = inv(ma) * mb ; 
        i_points(pt,:) = int_point;
        pt = pt+1;
    end
end

all_points = [c_points; i_points];

hold on
p1 = scatter(all_points(:,1), all_points(:,2),'filled');

% finding feasible points from all points

num_pts = size(all_points,1);

it = 1;

for i = 1:num_pts
    res = 1;
    pt = all_points(i,:);
    for j = 1:3
        ta = A(j,:);
        if ta * transpose(pt) > b(j)
            res =0;
        end
    end
    if res==1
        f_points(it,:) = pt;
        it = it+1;
    end
end

hold on
p2 = scatter(f_points(:,1), f_points(:,2),150,'bo');


max = 0;
pt_i = 0;

% finding the optimal soln
for i=1:size(f_points,1)
    pt = f_points(i,:);
    val = c*transpose(pt);
    if val>max
        max = val;
        pt_i = i;
    end
end

hold on
p3 = scatter(f_points(pt_i,1), f_points(pt_i,2), 400, 'ro');

legend([p1,p2,p3],{'Cutting Points', 'Feasible points', 'Optimal Point'});

fprintf('Max Value is: %d at ' , max);
display(f_points(pt_i,:));
